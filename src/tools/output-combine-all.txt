/* ===== src\app\about\page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { Mail, Linkedin, Github, ArrowLeft, User, Code, Briefcase, Award } from "lucide-react";

export default function About() {
  const skills = [
    { category: "Frontend", items: ["Next.js & React", "TypeScript & JavaScript", "Tailwind CSS & Shadcn/UI"] },
    { category: "Backend", items: ["Express.js & Node.js", "Prisma ORM & PostgreSQL"] },
    { category: "Tools", items: ["Git & GitHub", "AWS & Deployment", "Figma & Design"] }
  ];

  return (
    <div className="min-h-screen flex flex-col bg-background transition-colors duration-300">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-24 md:py-32">
        <div className="flex items-center mb-8">
          <Button asChild variant="ghost" className="rounded-full p-2 mr-2">
            <Link href="/">
              <ArrowLeft className="h-5 w-5" />
            </Link>
          </Button>
          <h1 className="text-3xl md:text-4xl font-bold">About Me</h1>
        </div>
        
        <div className="text-center mb-16 animate-fadeIn">
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Passionate full-stack developer with expertise in modern web technologies. Crafting elegant solutions for complex problems.
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-16">
          <Card className="shadow-xl rounded-2xl lg:col-span-2 animate-slideIn border border-border/50 hover:shadow-2xl transition-all duration-300 bg-card/80 backdrop-blur-sm">
            <CardHeader>
              <div className="flex items-center gap-3 mb-4">
                <div className="p-3 rounded-full bg-primary/10">
                  <User className="h-6 w-6 text-primary" />
                </div>
                <CardTitle className="text-3xl">Who I Am</CardTitle>
              </div>
            </CardHeader>
            <CardContent>
              <div className="prose max-w-none dark:prose-invert text-lg space-y-4">
                <p>
                  Hi, I&apos;m John Doe, a full-stack developer with over 5 years of experience in building scalable web applications. 
                  I&apos;m passionate about creating user-centric solutions using modern technologies.
                </p>
                <p>
                  My approach combines technical expertise with creative problem-solving to deliver exceptional digital experiences. 
                  I believe in writing clean, maintainable code and staying up-to-date with the latest industry trends.
                </p>
                <div className="grid grid-cols-2 gap-4 mt-6">
                  <div className="bg-primary/5 p-4 rounded-lg">
                    <h3 className="font-semibold text-lg mb-1">5+</h3>
                    <p className="text-muted-foreground text-sm">Years Experience</p>
                  </div>
                  <div className="bg-accent/10 p-4 rounded-lg">
                    <h3 className="font-semibold text-lg mb-1">50+</h3>
                    <p className="text-muted-foreground text-sm">Projects Completed</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card className="shadow-xl rounded-2xl animate-slideIn border border-border/50 hover:shadow-2xl transition-all duration-300 bg-card/80 backdrop-blur-sm" style={{ animationDelay: '0.1s' }}>
            <CardHeader>
              <div className="flex items-center gap-3 mb-4">
                <div className="p-3 rounded-full bg-primary/10">
                  <Mail className="h-6 w-6 text-primary" />
                </div>
                <CardTitle className="text-3xl">Contact</CardTitle>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                <div>
                  <p className="text-muted-foreground mb-4">Feel free to reach out for collaborations or just a friendly hello</p>
                </div>
                <div className="space-y-4">
                  <p className="flex items-center gap-3">
                    <Mail className="w-5 h-5 text-primary" />
                    <span>john.doe@example.com</span>
                  </p>
                  <p className="flex items-center gap-3">
                    <Linkedin className="w-5 h-5 text-primary" />
                    <Link href="https://linkedin.com/in/johndoe" className="text-primary hover:underline">
                      linkedin.com/in/johndoe
                    </Link>
                  </p>
                  <p className="flex items-center gap-3">
                    <Github className="w-5 h-5 text-primary" />
                    <Link href="https://github.com/johndoe" className="text-primary hover:underline">
                      github.com/johndoe
                    </Link>
                  </p>
                </div>
                <Button asChild className="w-full rounded-full mt-4 hover:scale-105 transition-transform duration-300">
                  <Link href="mailto:john.doe@example.com">Send Email</Link>
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
          {skills.map((skillGroup, index) => (
            <Card key={skillGroup.category} className="shadow-xl rounded-2xl animate-slideIn border border-border/50 hover:shadow-2xl transition-all duration-300 bg-card/80 backdrop-blur-sm" style={{ animationDelay: `${0.1 * index}s` }}>
              <CardHeader>
                <div className="flex items-center gap-3 mb-4">
                  <div className="p-2 rounded-full bg-primary/10">
                    <Code className="h-5 w-5 text-primary" />
                  </div>
                  <CardTitle className="text-2xl">{skillGroup.category}</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {skillGroup.items.map((skill, skillIndex) => (
                    <Badge key={skillIndex} variant="secondary" className="text-sm px-3 py-1 rounded-full">
                      {skill}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
        
        <Card className="shadow-xl rounded-2xl mb-16 animate-fadeIn border border-border/50 hover:shadow-2xl transition-all duration-300 bg-card/80 backdrop-blur-sm">
          <CardHeader>
            <div className="flex items-center gap-3 mb-4">
              <div className="p-3 rounded-full bg-primary/10">
                <Briefcase className="h-6 w-6 text-primary" />
              </div>
              <CardTitle className="text-3xl">Work Experience</CardTitle>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-8">
              <div className="relative pl-8 before:absolute before:left-4 before:top-0 before:bottom-0 before:w-0.5 before:bg-primary/20">
                <div className="relative before:absolute before:-left-[13px] before:top-2 before:w-3 before:h-3 before:rounded-full before:bg-primary">
                  <h3 className="text-2xl font-semibold">Senior Developer</h3>
                  <p className="text-primary font-medium">TechCorp (2020 - Present)</p>
                  <p className="mt-2 text-muted-foreground">
                    Led development of multiple enterprise applications using React, Node.js, and PostgreSQL. 
                    Mentored junior developers and implemented CI/CD pipelines.
                  </p>
                </div>
              </div>
              <div className="relative pl-8 before:absolute before:left-4 before:top-0 before:bottom-0 before:w-0.5 before:bg-primary/20">
                <div className="relative before:absolute before:-left-[13px] before:top-2 before:w-3 before:h-3 before:rounded-full before:bg-primary">
                  <h3 className="text-2xl font-semibold">Freelance Developer</h3>
                  <p className="text-primary font-medium">Self-employed (2018 - 2020)</p>
                  <p className="mt-2 text-muted-foreground">
                    Built custom websites for various clients using modern web technologies. 
                    Specialized in e-commerce solutions and responsive design.
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\blogs\page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import BlogCard from "@/components/BlogCard";
import { Button } from "@/components/ui/button";
import { ArrowLeft, BookOpen } from "lucide-react";
import Link from "next/link";

async function getBlogs() {
  try {
    const res = await fetch("https://next-prisma-portfolio-backend.vercel.app/api/blogs", {
      next: { revalidate: 3600 }, // ISR every hour
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!res.ok) {
      console.error("Failed to fetch blogs:", res.status, res.statusText);
      throw new Error(`Failed to fetch blogs: ${res.status} ${res.statusText}`);
    }
    
    const data = await res.json();
    console.log("Blogs data:", data); // For debugging
    return data;
  } catch (error) {
    console.error("Error fetching blogs:", error);
    throw error;
  }
}

interface Blog {
  id: number;
  title: string;
  content: string;
  slug: string;
  createdAt: string;
  // Add other fields as needed
}

export default async function Blogs() {
  let blogs: Blog[] = [];
  
  try {
    blogs = await getBlogs();
  } catch (error) {
    console.error("Error in Blogs page:", error);
  }

  return (
    <div className="min-h-screen flex flex-col bg-background transition-colors duration-300">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-24">
        <div className="flex items-center mb-8">
          <Button asChild variant="ghost" className="rounded-full p-2 mr-2">
            <Link href="/">
              <ArrowLeft className="h-5 w-5" />
            </Link>
          </Button>
          <h1 className="text-3xl md:text-4xl font-bold">My Blogs</h1>
        </div>
        
        <div className="text-center mb-16 animate-fadeIn">
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Read my thoughts, tutorials, and insights on technology and development.
          </p>
        </div>
        
        {blogs && blogs.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {blogs.map((blog: Blog) => (
              <BlogCard key={blog.id} blog={blog} />
            ))}
          </div>
        ) : (
          <div className="text-center py-16">
            <div className="bg-accent/10 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6">
              <BookOpen className="h-12 w-12 text-primary" />
            </div>
            <h2 className="text-2xl font-semibold mb-4">No blogs available yet</h2>
            <p className="text-muted-foreground mb-6">Check back soon for updates!</p>
            <Button asChild variant="outline" className="rounded-full">
              <Link href="/">Back to Home</Link>
            </Button>
          </div>
        )}
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\blogs\[slug]\page.tsx ===== */
/* ===== src\app\blogs\[slug]\page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

type Blog = {
  slug: string;
  title: string;
  content: string;
  createdAt: string;
};

// Define the props type explicitly, with params as a Promise
interface BlogPageProps {
  params: Promise<{ slug: string }>;
}

export async function generateStaticParams() {
  try {
    const res = await fetch("https://next-prisma-portfolio-backend.vercel.app/api/blogs");
    if (!res.ok) {
      console.error("Failed to fetch blogs for static params:", res.status);
      return [];
    }
    const blogs: Blog[] = await res.json();
    return blogs.map((blog) => ({
      slug: blog.slug,
    }));
  } catch (error) {
    console.error("Error generating static params:", error);
    return [];
  }
}

async function getBlog(slug: string) {
  try {
    const res = await fetch(`https://next-prisma-portfolio-backend.vercel.app/api/blogs/${slug}`, {
      next: { revalidate: 3600 }, // ISR
    });
    if (!res.ok) {
      console.error(`Failed to fetch blog ${slug}:`, res.status);
      throw new Error(`Failed to fetch blog: ${res.status}`);
    }
    return res.json();
  } catch (error) {
    console.error(`Error fetching blog ${slug}:`, error);
    throw error;
  }
}

export default async function BlogPage({ params }: BlogPageProps) {
  // Await the params Promise to get the slug
  const { slug } = await params;

  let blog = null;

  try {
    blog = await getBlog(slug);
  } catch (error) {
    console.error("Error in BlogPage:", error);
    return (
      <div className="min-h-screen flex flex-col">
        <Header />
        <main className="flex-1 container mx-auto px-4 py-12">
          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="text-3xl">Blog Not Found</CardTitle>
            </CardHeader>
            <CardContent>
              <p>The requested blog post could not be found.</p>
            </CardContent>
          </Card>
        </main>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-12">
        <Card className="shadow-lg">
          <CardHeader>
            <CardTitle className="text-3xl">{blog.title}</CardTitle>
            <p className="text-sm text-muted-foreground">
              {new Date(blog.createdAt).toLocaleDateString()}
            </p>
          </CardHeader>
          <CardContent>
            <div
              className="prose max-w-none dark:prose-invert"
              dangerouslySetInnerHTML={{ __html: blog.content }}
            />
          </CardContent>
        </Card>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\contact\page.tsx ===== */
"use client";

import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft, Mail, Phone, MapPin, Send } from "lucide-react";
import Link from "next/link";
import { useState } from "react";
import toast from "react-hot-toast";

export default function Contact() {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    subject: "",
    message: ""
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { id, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [id]: value
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Handle form submission
    console.log("Form submitted:", formData);
    toast.success("Thank you for your message! We'll get back to you soon.");
    
    // Reset form
    setFormData({
      name: "",
      email: "",
      subject: "",
      message: ""
    });
  };

  return (
    <div className="min-h-screen flex flex-col bg-background transition-colors duration-300">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-24">
        <div className="flex items-center mb-8">
          <Button asChild variant="ghost" className="rounded-full p-2 mr-2">
            <Link href="/">
              <ArrowLeft className="h-5 w-5" />
            </Link>
          </Button>
          <h1 className="text-3xl md:text-4xl font-bold">Contact Me</h1>
        </div>
        
        <div className="text-center mb-16 animate-fadeIn">
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Have a project in mind or want to discuss potential opportunities? Feel free to reach out!
          </p>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* Contact Information */}
          <div>
            <Card className="shadow-card rounded-2xl border-border/50 h-full">
              <CardHeader>
                <CardTitle className="text-2xl flex items-center gap-3">
                  <Mail className="h-6 w-6 text-primary" />
                  Get in Touch
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-8">
                <p className="text-muted-foreground">
                  I'm always open to discussing new projects, creative ideas, or opportunities to be part of your vision.
                </p>
                
                <div className="space-y-6">
                  <div className="flex items-start gap-4">
                    <div className="bg-primary/10 p-3 rounded-full">
                      <Mail className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <h3 className="font-semibold">Email</h3>
                      <Link 
                        href="mailto:contact@example.com" 
                        className="text-muted-foreground hover:text-primary transition-colors"
                      >
                        contact@example.com
                      </Link>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-4">
                    <div className="bg-primary/10 p-3 rounded-full">
                      <Phone className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <h3 className="font-semibold">Phone</h3>
                      <Link 
                        href="tel:+11234567890" 
                        className="text-muted-foreground hover:text-primary transition-colors"
                      >
                        +1 (123) 456-7890
                      </Link>
                    </div>
                  </div>
                  
                  <div className="flex items-start gap-4">
                    <div className="bg-primary/10 p-3 rounded-full">
                      <MapPin className="h-5 w-5 text-primary" />
                    </div>
                    <div>
                      <h3 className="font-semibold">Location</h3>
                      <p className="text-muted-foreground">
                        San Francisco, CA<br />
                        United States
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="pt-6">
                  <h3 className="font-semibold mb-4">Follow Me</h3>
                  <div className="flex flex-wrap gap-4">
                    <Button variant="outline" size="icon" asChild className="rounded-full">
                      <Link href="https://github.com" target="_blank" aria-label="GitHub">
                        <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
                        </svg>
                      </Link>
                    </Button>
                    <Button variant="outline" size="icon" asChild className="rounded-full">
                      <Link href="https://linkedin.com" target="_blank" aria-label="LinkedIn">
                        <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
                        </svg>
                      </Link>
                    </Button>
                    <Button variant="outline" size="icon" asChild className="rounded-full">
                      <Link href="https://twitter.com" target="_blank" aria-label="Twitter">
                        <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z" />
                        </svg>
                      </Link>
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* Contact Form */}
          <div>
            <Card className="shadow-card rounded-2xl border-border/50">
              <CardHeader>
                <CardTitle className="text-2xl flex items-center gap-3">
                  <Send className="h-6 w-6 text-primary" />
                  Send a Message
                </CardTitle>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="name">Name</Label>
                      <Input 
                        id="name" 
                        value={formData.name}
                        onChange={handleChange}
                        placeholder="Your name" 
                        required 
                        className="py-6 rounded-lg"
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="email">Email</Label>
                      <Input 
                        id="email" 
                        type="email" 
                        value={formData.email}
                        onChange={handleChange}
                        placeholder="your.email@example.com" 
                        required 
                        className="py-6 rounded-lg"
                      />
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="subject">Subject</Label>
                    <Input 
                      id="subject" 
                      value={formData.subject}
                      onChange={handleChange}
                      placeholder="What is this regarding?" 
                      required 
                      className="py-6 rounded-lg"
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="message">Message</Label>
                    <Textarea 
                      id="message" 
                      value={formData.message}
                      onChange={handleChange}
                      placeholder="Your message here..." 
                      required 
                      className="min-h-[180px] rounded-lg"
                    />
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full py-6 rounded-full text-lg transition-all duration-300 hover:scale-105 group"
                  >
                    Send Message
                    <Send className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\dashboard\page.tsx ===== */
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import BlogForm from "@/components/BlogForm";
import ProjectForm from "@/components/ProjectForm";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { cn } from "@/lib/utils";
import { ArrowLeft, LogOut, FileText, Code, BarChart3, Lightbulb } from "lucide-react";

interface Blog {
  id: number;
  title: string;
  slug: string;
  content: string;
  createdAt: string;
}

interface Project {
  id: number;
  title: string;
  thumbnail?: string;
  description: string;
  features: string[] | string; // Accept both array and string
  liveLink?: string;
  repoLink?: string;
  createdAt: string;
}

export default function Dashboard() {
  const [blogs, setBlogs] = useState<Blog[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [editingBlog, setEditingBlog] = useState<Blog | null>(null);
  const [editingProject, setEditingProject] = useState<Project | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<"blogs" | "projects">("blogs");
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      router.push("/login");
      return;
    }

    Promise.all([fetchBlogs(token), fetchProjects(token)]).then(() => setLoading(false));
  }, [router]);

  const fetchBlogs = async (token: string) => {
    try {
      const res = await fetch("https://next-prisma-portfolio-backend.vercel.app/api/blogs", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to fetch blogs");
      setBlogs(await res.json());
    } catch (error) {
      toast.error("Error fetching blogs");
    }
  };

  const fetchProjects = async (token: string) => {
    try {
      const res = await fetch("https://next-prisma-portfolio-backend.vercel.app/api/projects", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to fetch projects");
      setProjects(await res.json());
    } catch (error) {
      toast.error("Error fetching projects");
    }
  };

  const handleDeleteBlog = async (id: number) => {
    if (!confirm("Are you sure you want to delete this blog?")) return;
    try {
      const token = localStorage.getItem("token")!;
      const res = await fetch(`https://next-prisma-portfolio-backend.vercel.app/api/blogs/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to delete blog");
      toast.success("Blog deleted successfully");
      fetchBlogs(token);
    } catch (error) {
      toast.error("Error deleting blog");
    }
  };

  const handleDeleteProject = async (id: number) => {
    if (!confirm("Are you sure you want to delete this project?")) return;
    try {
      const token = localStorage.getItem("token")!;
      const res = await fetch(`https://next-prisma-portfolio-backend.vercel.app/api/projects/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to delete project");
      toast.success("Project deleted successfully");
      fetchProjects(token);
    } catch (error) {
      toast.error("Error deleting project");
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    router.push("/login");
    toast.success("Logged out successfully");
  };

  return (
    <div className="min-h-screen flex flex-col bg-background transition-colors duration-300">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-24">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div className="flex items-center">
            <Button asChild variant="ghost" className="rounded-full p-2 mr-2">
              <button onClick={() => router.back()}>
                <ArrowLeft className="h-5 w-5" />
              </button>
            </Button>
            <div>
              <h1 className="text-3xl font-bold">Dashboard</h1>
              <p className="text-muted-foreground">Manage your content and portfolio</p>
            </div>
          </div>
          <Button variant="destructive" onClick={handleLogout} className="rounded-full group">
            <LogOut className="mr-2 h-4 w-4 group-hover:rotate-180 transition-transform" />
            Logout
          </Button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <Card className="shadow-card rounded-xl border-border/50">
              <CardHeader className="pb-4">
                <div className="flex border-b border-border">
                  <Button
                    variant="ghost"
                    className={cn(
                      "rounded-none px-6 pb-3 font-semibold",
                      activeTab === "blogs" 
                        ? "border-b-2 border-primary text-primary" 
                        : "text-muted-foreground"
                    )}
                    onClick={() => setActiveTab("blogs")}
                  >
                    <FileText className="mr-2 h-4 w-4" />
                    Blogs
                  </Button>
                  <Button
                    variant="ghost"
                    className={cn(
                      "rounded-none px-6 pb-3 font-semibold",
                      activeTab === "projects" 
                        ? "border-b-2 border-primary text-primary" 
                        : "text-muted-foreground"
                    )}
                    onClick={() => setActiveTab("projects")}
                  >
                    <Code className="mr-2 h-4 w-4" />
                    Projects
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="pt-6">
                {activeTab === "blogs" ? (
                  <div className="space-y-6">
                    <BlogForm
                      editingBlog={editingBlog}
                      setEditingBlog={setEditingBlog}
                      refreshBlogs={() => fetchBlogs(localStorage.getItem("token")!)}
                    />
                    <div className="border-t border-border pt-6">
                      <h3 className="text-lg font-semibold mb-4">Your Blogs</h3>
                      {loading ? (
                        <div className="space-y-4">
                          <Skeleton className="h-16 w-full rounded-lg" />
                          <Skeleton className="h-16 w-full rounded-lg" />
                          <Skeleton className="h-16 w-full rounded-lg" />
                        </div>
                      ) : blogs.length === 0 ? (
                        <div className="text-center py-8 text-muted-foreground">
                          <FileText className="h-12 w-12 mx-auto mb-4 text-muted-foreground/20" />
                          <p>No blogs created yet</p>
                        </div>
                      ) : (
                        <ul className="space-y-3">
                          {blogs.map((blog) => (
                            <li 
                              key={blog.id} 
                              className="flex justify-between items-center p-4 border border-border rounded-lg hover:bg-accent transition-colors animate-fadeIn"
                            >
                              <div className="flex-1 min-w-0">
                                <h4 className="font-medium truncate">{blog.title}</h4>
                                <p className="text-sm text-muted-foreground truncate">
                                  {new Date(blog.createdAt).toLocaleDateString()}
                                </p>
                              </div>
                              <div className="flex space-x-2 ml-4">
                                <Button 
                                  variant="outline" 
                                  size="sm" 
                                  onClick={() => setEditingBlog(blog)}
                                  className="rounded-full"
                                >
                                  Edit
                                </Button>
                                <Button 
                                  variant="destructive" 
                                  size="sm" 
                                  onClick={() => handleDeleteBlog(blog.id)}
                                  className="rounded-full"
                                >
                                  Delete
                                </Button>
                              </div>
                            </li>
                          ))}
                        </ul>
                      )}
                    </div>
                  </div>
                ) : (
                  <div className="space-y-6">
                    <ProjectForm
                      editingProject={editingProject}
                      setEditingProject={setEditingProject}
                      refreshProjects={() => fetchProjects(localStorage.getItem("token")!)}
                    />
                    <div className="border-t border-border pt-6">
                      <h3 className="text-lg font-semibold mb-4">Your Projects</h3>
                      {loading ? (
                        <div className="space-y-4">
                          <Skeleton className="h-16 w-full rounded-lg" />
                          <Skeleton className="h-16 w-full rounded-lg" />
                          <Skeleton className="h-16 w-full rounded-lg" />
                        </div>
                      ) : projects.length === 0 ? (
                        <div className="text-center py-8 text-muted-foreground">
                          <Code className="h-12 w-12 mx-auto mb-4 text-muted-foreground/20" />
                          <p>No projects created yet</p>
                        </div>
                      ) : (
                        <ul className="space-y-3">
                          {projects.map((project) => (
                            <li 
                              key={project.id} 
                              className="flex justify-between items-center p-4 border border-border rounded-lg hover:bg-accent transition-colors animate-fadeIn"
                            >
                              <div className="flex-1 min-w-0">
                                <h4 className="font-medium truncate">{project.title}</h4>
                                <p className="text-sm text-muted-foreground truncate line-clamp-1">
                                  {project.description.replace(/<[^>]*>/g, '')}
                                </p>
                              </div>
                              <div className="flex space-x-2 ml-4">
                                <Button 
                                  variant="outline" 
                                  size="sm" 
                                  onClick={() => setEditingProject(project)}
                                  className="rounded-full"
                                >
                                  Edit
                                </Button>
                                <Button 
                                  variant="destructive" 
                                  size="sm" 
                                  onClick={() => handleDeleteProject(project.id)}
                                  className="rounded-full"
                                >
                                  Delete
                                </Button>
                              </div>
                            </li>
                          ))}
                        </ul>
                      )}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
          
          <div className="space-y-8">
            <Card className="shadow-card rounded-xl border-border/50">
              <CardHeader>
                <div className="flex items-center gap-3">
                  <BarChart3 className="h-5 w-5 text-primary" />
                  <CardTitle className="text-xl">Quick Stats</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-primary/5 p-4 rounded-lg text-center border border-primary/10">
                    <p className="text-2xl font-bold">{blogs.length}</p>
                    <p className="text-sm text-muted-foreground">Blogs</p>
                  </div>
                  <div className="bg-accent p-4 rounded-lg text-center border border-accent/30">
                    <p className="text-2xl font-bold">{projects.length}</p>
                    <p className="text-sm text-muted-foreground">Projects</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            
            <Card className="shadow-card rounded-xl border-border/50">
              <CardHeader>
                <div className="flex items-center gap-3">
                  <Lightbulb className="h-5 w-5 text-primary" />
                  <CardTitle className="text-xl">Tips</CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <ul className="space-y-3 text-sm">
                  <li className="flex items-start">
                    <span className="text-primary mr-2 mt-1">•</span>
                    <span>Keep your blog titles concise and engaging</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-primary mr-2 mt-1">•</span>
                    <span>Add high-quality images to your projects</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-primary mr-2 mt-1">•</span>
                    <span>Regularly update your portfolio content</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-primary mr-2 mt-1">•</span>
                    <span>Use descriptive meta tags for SEO</span>
                  </li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\layout.tsx ===== */
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "react-hot-toast";
import { ThemeProvider } from "@/components/ThemeProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "My Portfolio",
  description: "Personal portfolio showcasing projects and blogs",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ThemeProvider>
          {children}
          <Toaster position="top-right" />
        </ThemeProvider>
      </body>
    </html>
  );
}

/* ===== src\app\login\page.tsx ===== */
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";
import { z } from "zod";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowLeft, LogIn, Mail, Lock } from "lucide-react";

const loginSchema = z.object({
  email: z.string().email("Invalid email"),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

interface LoginForm {
  email: string;
  password: string;
}

export default function Login() {
  const [formData, setFormData] = useState<LoginForm>({
    email: "",
    password: "",
  });
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const router = useRouter();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [id]: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      loginSchema.parse(formData);
      
      setIsLoading(true);
      
      const res = await fetch("https://next-prisma-portfolio-backend.vercel.app/api/auth/login", {
        method: "POST",
        headers: { 
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });
      
      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "Invalid credentials");
      }
      
      const { token } = await res.json();
      localStorage.setItem("token", token);
      toast.success("Logged in successfully");
      router.push("/dashboard");
    } catch (error: unknown) {
      if (error instanceof z.ZodError) {
        toast.error(error.issues[0].message);
      } else if (error instanceof Error) {
        toast.error(error.message || "Login failed");
      } else {
        toast.error("Login failed");
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-background transition-colors duration-100 py-8">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-12 flex items-center justify-center">
        <div className="w-full max-w-md">
          <div className="flex items-center mb-6">
            <Button asChild variant="ghost" className="rounded-full p-2 mr-2">
              <button onClick={() => router.back()}>
                <ArrowLeft className="h-5 w-5" />
              </button>
            </Button>
            <h1 className="text-2xl font-bold">Login to Dashboard</h1>
          </div>
          
          <Card className="w-full shadow-card rounded-2xl animate-fadeIn border-border/50 overflow-hidden">
            <div className="bg-gradient-to-r from-primary/10 to-accent/10 p-6 text-center">
              <div className="mx-auto bg-primary p-3 rounded-full w-16 h-16 flex items-center justify-center mb-4">
                <LogIn className="h-8 w-8 text-primary-foreground" />
              </div>
              <CardTitle className="text-2xl">Welcome Back</CardTitle>
              <p className="text-muted-foreground mt-2">Sign in to your account</p>
            </div>
            
            <CardContent className="pt-6">
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="email" className="text-lg font-medium flex items-center gap-2">
                    <Mail className="h-4 w-4" />
                    Email
                  </Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={handleChange}
                      required
                      className="py-6 rounded-lg transition-all duration-300 focus:ring-2 focus:ring-primary/50 pl-12"
                      placeholder="Enter your email"
                    />
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="password" className="text-lg font-medium flex items-center gap-2">
                    <Lock className="h-4 w-4" />
                    Password
                  </Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                    <Input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      value={formData.password}
                      onChange={handleChange}
                      required
                      className="py-6 rounded-lg transition-all duration-300 focus:ring-2 focus:ring-primary/50 pl-12"
                      placeholder="Enter your password"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? "🙈" : "👁️"}
                    </Button>
                  </div>
                </div>
                
                <div className="flex justify-between items-center">
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      id="remember"
                      className="h-4 w-4 rounded border-border text-primary focus:ring-primary"
                    />
                    <label htmlFor="remember" className="ml-2 text-sm text-muted-foreground">
                      Remember me
                    </label>
                  </div>
                </div>
                
                <Button 
                  type="submit" 
                  disabled={isLoading}
                  className="w-full py-6 rounded-full text-lg transition-all duration-300 hover:scale-105 group"
                >
                  {isLoading ? (
                    <>
                      <span className="mr-2 h-4 w-4 animate-spin">⏳</span>
                      Signing in...
                    </>
                  ) : (
                    <>
                      Sign In
                      <LogIn className="ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform" />
                    </>
                  )}
                </Button>
              </form>
              
              <div className="mt-6 text-center">
                <p className="text-muted-foreground text-xs mt-4">
                  Default credentials: admin@example.com / password123
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ArrowRight, Github, Linkedin, Mail, User, Code, BookOpen } from "lucide-react";

export default function Home() {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-24">
        {/* Hero Section */}
        <section className="text-center mb-24 animate-fadeIn">
          <h1 className="text-4xl md:text-6xl font-bold mb-6 gradient-text">
            Welcome to My Portfolio
          </h1>
          <p className="text-xl md:text-2xl mb-10 text-muted-foreground max-w-3xl mx-auto">
            Showcasing innovative projects, insightful blogs, and my journey in tech.
          </p>
          <div className="flex justify-center mb-12">
            <div className="relative w-48 h-48 md:w-56 md:h-56 rounded-full overflow-hidden border-4 border-primary/20 shadow-card">
              <Image
                src="https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=500&h=500&q=80"
                alt="Profile Picture"
                fill
                className="object-cover"
                priority
              />
            </div>
          </div>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <Button asChild size="lg" className="rounded-full px-8 text-lg group">
              <Link href="/projects">
                Explore Projects
                <ArrowRight className="ml-2 h-5 w-5 transition-transform group-hover:translate-x-1" />
              </Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="rounded-full px-8 text-lg">
              <Link href="/about">Learn More</Link>
            </Button>
          </div>
        </section>
        
        {/* Features Section */}
        <section className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-24">
          <Card className="hover:shadow-card-hover transition-all duration-300 rounded-xl border-0 bg-gradient-to-br from-background to-accent/10 animate-slideIn hover:scale-[1.02]">
            <CardHeader>
              <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
                <User className="h-6 w-6 text-primary" />
              </div>
              <CardTitle className="text-2xl">About Me</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="mb-6">Discover my background, skills, and passions.</p>
              <Button variant="outline" asChild className="rounded-full group">
                <Link href="/about">
                  Learn More
                  <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                </Link>
              </Button>
            </CardContent>
          </Card>
          
          <Card className="hover:shadow-card-hover transition-all duration-300 rounded-xl border-0 bg-gradient-to-br from-background to-primary/10 animate-slideIn hover:scale-[1.02]" style={{ animationDelay: '0.1s' }}>
            <CardHeader>
              <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
                <Code className="h-6 w-6 text-primary" />
              </div>
              <CardTitle className="text-2xl">Projects</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="mb-6">View my latest creations and innovations.</p>
              <Button variant="outline" asChild className="rounded-full group">
                <Link href="/projects">
                  View Projects
                  <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                </Link>
              </Button>
            </CardContent>
          </Card>
          
          <Card className="hover:shadow-card-hover transition-all duration-300 rounded-xl border-0 bg-gradient-to-br from-background to-accent/10 animate-slideIn hover:scale-[1.02]" style={{ animationDelay: '0.2s' }}>
            <CardHeader>
              <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mb-4">
                <BookOpen className="h-6 w-6 text-primary" />
              </div>
              <CardTitle className="text-2xl">Blogs</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="mb-6">Read my thoughts on tech and development.</p>
              <Button variant="outline" asChild className="rounded-full group">
                <Link href="/blogs">
                  Read Blogs
                  <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover:translate-x-1" />
                </Link>
              </Button>
            </CardContent>
          </Card>
        </section>
        
        {/* CTA Section */}
        <section className="text-center py-16 bg-gradient-to-r from-primary/5 to-accent/5 rounded-2xl mb-24">
          <h2 className="text-3xl font-bold mb-4">Let&apos;s Connect</h2>
          <p className="text-muted-foreground mb-8 max-w-2xl mx-auto">
            Interested in working together or have questions? Feel free to reach out!
          </p>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <Button asChild variant="outline" size="lg" className="rounded-full">
              <Link href="/contact">
                <Mail className="mr-2 h-5 w-5" />
                Contact Me
              </Link>
            </Button>
          </div>
        </section>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\projects\page.tsx ===== */
"use client";

import { useEffect, useState } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import ProjectCard from "@/components/ProjectsCard";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Code } from "lucide-react";
import Link from "next/link";
import { Skeleton } from "@/components/ui/skeleton";

interface Project {
  id: number;
  title: string;
  thumbnail?: string;
  description: string;
  features: string[] | string; // Accept both array and string
  liveLink?: string;
  repoLink?: string;
}

export default function Projects() {
  const [projects, setProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        setLoading(true);
        setError(null);
        const res = await fetch("https://next-prisma-portfolio-backend.vercel.app/api/projects");
        if (!res.ok) {
          throw new Error(`Failed to fetch projects: ${res.status} ${res.statusText}`);
        }
        const data = await res.json();
        console.log("Projects data:", data);
        // Ensure we have an array
        const projectsArray = Array.isArray(data) ? data : [];
        setProjects(projectsArray);
      } catch (err) {
        console.error("Error fetching projects:", err);
        setError(err instanceof Error ? err.message : "Unknown error");
        // Ensure we have an empty array on error
        setProjects([]);
      } finally {
        setLoading(false);
      }
    };

    fetchProjects();
  }, []);

  return (
    <div className="min-h-screen flex flex-col bg-background transition-colors duration-300">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-24">
        <div className="flex items-center mb-8">
          <Button asChild variant="ghost" className="rounded-full p-2 mr-2">
            <Link href="/">
              <ArrowLeft className="h-5 w-5" />
            </Link>
          </Button>
          <h1 className="text-3xl md:text-4xl font-bold">My Projects</h1>
        </div>
        
        <div className="text-center mb-16 animate-fadeIn">
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Explore my latest creations and innovations in web development and design.
          </p>
        </div>
        
        {loading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {[1, 2, 3].map((i) => (
              <div key={i} className="space-y-4">
                <Skeleton className="h-48 w-full rounded-xl" />
                <Skeleton className="h-6 w-3/4" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-2/3" />
              </div>
            ))}
          </div>
        ) : error ? (
          <div className="text-center py-16">
            <div className="bg-destructive/10 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6">
              <Code className="h-12 w-12 text-destructive" />
            </div>
            <h2 className="text-2xl font-semibold mb-4">Error Loading Projects</h2>
            <p className="text-muted-foreground mb-6">{error}</p>
            <Button asChild variant="outline" className="rounded-full">
              <Link href="/">Back to Home</Link>
            </Button>
          </div>
        ) : projects && projects.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {projects.map((project: Project) => (
              <ProjectCard key={project.id} project={project} />
            ))}
          </div>
        ) : (
          <div className="text-center py-16">
            <div className="bg-accent/10 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6">
              <Code className="h-12 w-12 text-primary" />
            </div>
            <h2 className="text-2xl font-semibold mb-4">No projects available yet</h2>
            <p className="text-muted-foreground mb-6">Check back soon for updates!</p>
            <Button asChild variant="outline" className="rounded-full">
              <Link href="/">Back to Home</Link>
            </Button>
          </div>
        )}
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\components\BlogCard.tsx ===== */
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowRight } from "lucide-react";

interface BlogCardProps {
  blog: {
    id: number;
    title: string;
    slug: string;
    createdAt: string;
  };
}

export default function BlogCard({ blog }: BlogCardProps) {
  return (
    <Card className="hover:shadow-card-hover transition-all duration-300 overflow-hidden rounded-xl animate-fadeIn group border-border/50 hover:border-primary/30 hover:scale-[1.02]">
      <div className="relative h-40 w-full overflow-hidden">
        <img 
          src={`https://images.unsplash.com/photo-1499750310107-5fef28a66643?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&h=300&q=80`} 
          alt={blog.title} 
          className="object-cover w-full h-full transition-transform duration-500 group-hover:scale-105"
          loading="lazy"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-background/80 to-transparent" />
      </div>
      <CardHeader className="pb-3">
        <CardTitle className="text-xl line-clamp-2 group-hover:text-primary transition-colors">
          {blog.title}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground mb-4">
          {new Date(blog.createdAt).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
          })}
        </p>
        <Button asChild variant="outline" className="w-full rounded-full group/button">
          <Link href={`/blogs/${blog.slug}`}>
            Read Article
            <ArrowRight className="ml-2 h-4 w-4 transition-transform group-hover/button:translate-x-1" />
          </Link>
        </Button>
      </CardContent>
    </Card>
  );
}

/* ===== src\components\BlogForm.tsx ===== */
/* ===== components/BlogForm.tsx ===== */
"use client";

import { useState, useEffect } from "react";
import toast from "react-hot-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import { cn } from "@/lib/utils";
import { Save, FileText, X } from "lucide-react";

interface Blog {
  id: number;
  title: string;
  slug: string;
  content: string;
  createdAt: string;
}

interface BlogFormProps {
  editingBlog: Blog | null;
  setEditingBlog: (blog: Blog | null) => void;
  refreshBlogs: () => void;
}

export default function BlogForm({ editingBlog, setEditingBlog, refreshBlogs }: BlogFormProps) {
  const [title, setTitle] = useState(editingBlog?.title || "");
  const [isMounted, setIsMounted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Update form state when editingBlog changes
  useEffect(() => {
    if (editingBlog) {
      setTitle(editingBlog.title || "");
    } else {
      setTitle("");
    }
  }, [editingBlog]);

  // Prevent SSR by only initializing editor on client
  useEffect(() => {
    setIsMounted(true);
  }, []);

  const editor = useEditor({
    extensions: [StarterKit],
    content: editingBlog?.content || "",
    editorProps: {
      attributes: {
        class: 'prose focus:outline-none min-h-[200px] p-4 border rounded-lg transition-colors duration-300 focus:border-primary dark:prose-invert bg-background',
      },
    },
    immediatelyRender: false, // Explicitly disable SSR rendering
  });

  // Update editor content when editingBlog changes
  useEffect(() => {
    if (editor && editingBlog) {
      editor.commands.setContent(editingBlog.content || "");
    } else if (editor) {
      editor.commands.clearContent();
    }
  }, [editor, editingBlog]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!title || !editor?.getHTML()) {
      toast.error("Title and content are required");
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      const token = localStorage.getItem("token")!;
      const url = editingBlog
        ? `https://next-prisma-portfolio-backend.vercel.app/api/blogs/${editingBlog.id}`
        : "https://next-prisma-portfolio-backend.vercel.app/api/blogs";
      const method = editingBlog ? "PUT" : "POST";
      const res = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ title, content: editor.getHTML() }),
      });
      if (!res.ok) throw new Error("Failed to save blog");
      toast.success(editingBlog ? "Blog updated successfully" : "Blog created successfully");
      setTitle("");
      editor?.commands.clearContent();
      setEditingBlog(null);
      refreshBlogs();
    } catch (error) {
      toast.error("Error saving blog");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isMounted) {
    return null; // Prevent rendering on server
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6 animate-fadeIn">
      <div className="space-y-2">
        <Label htmlFor="title" className="text-lg font-medium flex items-center gap-2">
          <FileText className="h-4 w-4" />
          Title
        </Label>
        <Input
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
          className="text-lg py-6 rounded-lg transition-all duration-300 focus:ring-2 focus:ring-primary/50"
          placeholder="Enter blog title"
        />
      </div>
      <div className="space-y-2">
        <Label className="text-lg font-medium">Content</Label>
        <div className="border rounded-lg transition-all duration-300 focus-within:ring-2 focus-within:ring-primary/50 focus-within:border-primary">
          <EditorContent 
            editor={editor} 
            className="min-h-[200px]"
          />
        </div>
      </div>
      <div className="flex flex-wrap gap-3 pt-4">
        <Button 
          type="submit" 
          disabled={isSubmitting}
          className="rounded-full px-6 transition-all duration-300 hover:scale-105 group"
        >
          {isSubmitting ? (
            <>
              <span className="mr-2 h-4 w-4 animate-spin">⏳</span>
              {editingBlog ? "Updating..." : "Creating..."}
            </>
          ) : (
            <>
              <Save className="mr-2 h-4 w-4 group-hover:rotate-12 transition-transform" />
              {editingBlog ? "Update Blog" : "Create Blog"}
            </>
          )}
        </Button>
        {editingBlog && (
          <Button
            type="button"
            variant="outline"
            onClick={() => setEditingBlog(null)}
            className="rounded-full px-6 transition-all duration-300 hover:scale-105"
          >
            Cancel
          </Button>
        )}
      </div>
    </form>
  );
}

/* ===== src\components\Footer.tsx ===== */
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Github, Linkedin, Mail } from "lucide-react";

export default function Footer() {
  return (
    <footer className="border-t border-border/50 bg-background/50 backdrop-blur-sm transition-colors duration-300">
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row justify-between items-center gap-6">
          <div className="text-center md:text-left">
            <h3 className="text-xl font-bold gradient-text">Portfolio</h3>
            <p className="text-muted-foreground mt-2">
              Showcasing innovative projects and insightful blogs
            </p>
          </div>
          
          <div className="flex items-center gap-4">
            <Button variant="outline" size="icon" asChild className="rounded-full">
              <Link href="mailto:contact@example.com" aria-label="Email">
                <Mail className="h-5 w-5" />
              </Link>
            </Button>
            <Button variant="outline" size="icon" asChild className="rounded-full">
              <Link href="https://linkedin.com" target="_blank" aria-label="LinkedIn">
                <Linkedin className="h-5 w-5" />
              </Link>
            </Button>
            <Button variant="outline" size="icon" asChild className="rounded-full">
              <Link href="https://github.com" target="_blank" aria-label="GitHub">
                <Github className="h-5 w-5" />
              </Link>
            </Button>
          </div>
        </div>
        
        <div className="border-t border-border/30 mt-8 pt-8 text-center text-muted-foreground">
          <p>© {new Date().getFullYear()} My Portfolio. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}

/* ===== src\components\Header.tsx ===== */
"use client";

import Link from "next/link";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { ThemeToggle } from "@/components/ThemeToggle";
import { Menu, X } from "lucide-react";

export default function Header() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  useEffect(() => {
    setIsLoggedIn(!!localStorage.getItem("token"));
    
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10);
    };
    
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const navItems = [
    { href: "/", label: "Home" },
    { href: "/about", label: "About" },
    { href: "/projects", label: "Projects" },
    { href: "/blogs", label: "Blogs" },
    { href: "/contact", label: "Contact" },
    { href: isLoggedIn ? "/dashboard" : "/login", label: isLoggedIn ? "Dashboard" : "Login" }
  ];

  return (
    <header className={cn(
      "fixed top-0 left-0 right-0 z-50 transition-all duration-300",
      isScrolled ? "bg-background/80 backdrop-blur-md py-2 shadow-sm" : "bg-background py-4"
    )}>
      <nav className="container mx-auto px-4 flex justify-between items-center">
        <Link 
          href="/" 
          className="text-2xl font-bold gradient-text"
        >
          Portfolio
        </Link>
        
        {/* Desktop Navigation */}
        <div className="hidden md:flex items-center space-x-1">
          {navItems.map((item) => (
            <Button 
              key={item.href}
              variant="ghost" 
              asChild
              className="text-foreground/80 hover:text-foreground hover:bg-accent/50 rounded-full px-3 md:px-4 transition-colors"
            >
              <Link href={item.href}>{item.label}</Link>
            </Button>
          ))}
          <ThemeToggle />
        </div>
        
        {/* Mobile Navigation */}
        <div className="flex md:hidden items-center">
          <ThemeToggle />
          <Button 
            variant="ghost" 
            size="icon"
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="ml-2 rounded-full"
          >
            {isMobileMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
          </Button>
        </div>
      </nav>
      
      {/* Mobile Menu */}
      {isMobileMenuOpen && (
        <div className="md:hidden bg-background border-t border-border/50">
          <div className="container mx-auto px-4 py-3 flex flex-col space-y-2 max-h-[calc(100vh-100px)] overflow-y-auto">
            {navItems.map((item) => (
              <Button 
                key={item.href}
                variant="ghost" 
                asChild
                className="justify-start text-foreground/80 hover:text-foreground hover:bg-accent/50 rounded-full px-4 py-3"
                onClick={() => setIsMobileMenuOpen(false)}
              >
                <Link href={item.href}>{item.label}</Link>
              </Button>
            ))}
          </div>
        </div>
      )}
    </header>
  );
}

/* ===== src\components\ProjectForm.tsx ===== */
/* ===== components/ProjectForm.tsx ===== */
"use client";

import { useState, useEffect } from "react";
import toast from "react-hot-toast";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import { cn } from "@/lib/utils";
import { Save, Image as ImageIcon, Link, Code, X } from "lucide-react";

interface Project {
  id: number;
  title: string;
  thumbnail?: string;
  description: string;
  features: string[] | string; // Accept both array and string
  liveLink?: string;
  repoLink?: string;
  createdAt: string;
}

interface ProjectFormProps {
  editingProject: Project | null;
  setEditingProject: (project: Project | null) => void;
  refreshProjects: () => void;
}

export default function ProjectForm({ editingProject, setEditingProject, refreshProjects }: ProjectFormProps) {
  const [title, setTitle] = useState(editingProject?.title || "");
  const [thumbnail, setThumbnail] = useState(editingProject?.thumbnail || "");
  const [features, setFeatures] = useState("");
  const [liveLink, setLiveLink] = useState(editingProject?.liveLink || "");
  const [repoLink, setRepoLink] = useState(editingProject?.repoLink || "");
  const [isMounted, setIsMounted] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Update form state when editingProject changes
  useEffect(() => {
    if (editingProject) {
      setTitle(editingProject.title || "");
      setThumbnail(editingProject.thumbnail || "");
      
      // Handle features whether they're an array or string
      if (Array.isArray(editingProject.features)) {
        setFeatures(editingProject.features.join(", "));
      } else if (typeof editingProject.features === 'string') {
        setFeatures(editingProject.features);
      } else {
        setFeatures("");
      }
      
      setLiveLink(editingProject.liveLink || "");
      setRepoLink(editingProject.repoLink || "");
    } else {
      setTitle("");
      setThumbnail("");
      setFeatures("");
      setLiveLink("");
      setRepoLink("");
    }
  }, [editingProject]);

  // Prevent SSR by only initializing editor on client
  useEffect(() => {
    setIsMounted(true);
  }, []);

  const editor = useEditor({
    extensions: [StarterKit],
    content: editingProject?.description || "",
    editorProps: {
      attributes: {
        class: 'prose focus:outline-none min-h-[150px] p-4 border rounded-lg transition-colors duration-300 focus:border-primary dark:prose-invert bg-background',
      },
    },
    immediatelyRender: false, // Explicitly disable SSR rendering
  });

  // Update editor content when editingProject changes
  useEffect(() => {
    if (editor && editingProject) {
      editor.commands.setContent(editingProject.description || "");
    } else if (editor) {
      editor.commands.clearContent();
    }
  }, [editor, editingProject]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!title || !editor?.getHTML()) {
      toast.error("Title and description are required");
      return;
    }
    
    setIsSubmitting(true);
    
    const data = {
      title,
      thumbnail,
      description: editor.getHTML(),
      features: features.split(",").map((f: string) => f.trim()).filter(Boolean),
      liveLink,
      repoLink,
    };
    
    try {
      const token = localStorage.getItem("token")!;
      const url = editingProject
        ? `https://next-prisma-portfolio-backend.vercel.app/api/projects/${editingProject.id}`
        : "https://next-prisma-portfolio-backend.vercel.app/api/projects";
      const method = editingProject ? "PUT" : "POST";
      const res = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(data),
      });
      if (!res.ok) throw new Error("Failed to save project");
      toast.success(editingProject ? "Project updated successfully" : "Project created successfully");
      setTitle("");
      setThumbnail("");
      editor?.commands.clearContent();
      setFeatures("");
      setLiveLink("");
      setRepoLink("");
      setEditingProject(null);
      refreshProjects();
    } catch (error) {
      toast.error("Error saving project");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isMounted) {
    return null; // Prevent rendering on server
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6 animate-fadeIn">
      <div className="space-y-2">
        <Label htmlFor="title" className="text-lg font-medium flex items-center gap-2">
          <Code className="h-4 w-4" />
          Title
        </Label>
        <Input
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
          className="text-lg py-6 rounded-lg transition-all duration-300 focus:ring-2 focus:ring-primary/50"
          placeholder="Enter project title"
        />
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="thumbnail" className="text-lg font-medium flex items-center gap-2">
          <ImageIcon className="h-4 w-4" />
          Thumbnail URL
        </Label>
        <div className="flex gap-2">
          <Input
            id="thumbnail"
            value={thumbnail}
            onChange={(e) => setThumbnail(e.target.value)}
            className="py-6 rounded-lg transition-all duration-300 focus:ring-2 focus:ring-primary/50 flex-1"
            placeholder="https://example.com/image.jpg"
          />
          {thumbnail && (
            <Button 
              type="button" 
              variant="outline" 
              size="icon"
              onClick={() => setThumbnail("")}
              className="rounded-full"
            >
              <X className="h-4 w-4" />
            </Button>
          )}
        </div>
        {thumbnail && (
          <div className="mt-2 relative w-full h-32 rounded-lg overflow-hidden border border-border">
            <img 
              src={thumbnail} 
              alt="Thumbnail preview" 
              className="object-cover w-full h-full"
              onError={(e) => {
                e.currentTarget.src = "https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&h=400&q=80";
              }}
            />
          </div>
        )}
      </div>
      
      <div className="space-y-2">
        <Label className="text-lg font-medium">Description</Label>
        <div className="border rounded-lg transition-all duration-300 focus-within:ring-2 focus-within:ring-primary/50 focus-within:border-primary">
          <EditorContent 
            editor={editor} 
            className="min-h-[150px]"
          />
        </div>
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="features" className="text-lg font-medium">Features (comma-separated)</Label>
        <Input
          id="features"
          value={features}
          onChange={(e) => setFeatures(e.target.value)}
          className="py-6 rounded-lg transition-all duration-300 focus:ring-2 focus:ring-primary/50"
          placeholder="Feature 1, Feature 2, Feature 3"
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="liveLink" className="text-lg font-medium flex items-center gap-2">
            <Link className="h-4 w-4" />
            Live Link
          </Label>
          <Input
            id="liveLink"
            value={liveLink}
            onChange={(e) => setLiveLink(e.target.value)}
            className="py-6 rounded-lg transition-all duration-300 focus:ring-2 focus:ring-primary/50"
            placeholder="https://example.com/live-demo"
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="repoLink" className="text-lg font-medium flex items-center gap-2">
            <Code className="h-4 w-4" />
            Repository Link
          </Label>
          <Input
            id="repoLink"
            value={repoLink}
            onChange={(e) => setRepoLink(e.target.value)}
            className="py-6 rounded-lg transition-all duration-300 focus:ring-2 focus:ring-primary/50"
            placeholder="https://github.com/username/repo"
          />
        </div>
      </div>
      
      <div className="flex flex-wrap gap-3 pt-4">
        <Button 
          type="submit" 
          disabled={isSubmitting}
          className="rounded-full px-6 transition-all duration-300 hover:scale-105 group"
        >
          {isSubmitting ? (
            <>
              <span className="mr-2 h-4 w-4 animate-spin">⏳</span>
              {editingProject ? "Updating..." : "Creating..."}
            </>
          ) : (
            <>
              <Save className="mr-2 h-4 w-4 group-hover:rotate-12 transition-transform" />
              {editingProject ? "Update Project" : "Create Project"}
            </>
          )}
        </Button>
        {editingProject && (
          <Button
            type="button"
            variant="outline"
            onClick={() => setEditingProject(null)}
            className="rounded-full px-6 transition-all duration-300 hover:scale-105"
          >
            Cancel
          </Button>
        )}
      </div>
    </form>
  );
}

/* ===== src\components\ProjectsCard.tsx ===== */
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ExternalLink, Github } from "lucide-react";

interface ProjectCardProps {
  project: {
    id: number;
    title: string;
    thumbnail?: string;
    description: string;
    features: string[] | string; // Accept both array and string
    liveLink?: string;
    repoLink?: string;
  };
}

export default function ProjectCard({ project }: ProjectCardProps) {
  // Use Unsplash image if no thumbnail is provided
  const imageUrl = project.thumbnail || `https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&h=400&q=80`;
  
  // Ensure features is always an array
  let featuresArray: string[] = [];
  try {
    if (Array.isArray(project.features)) {
      featuresArray = project.features;
    } else if (typeof project.features === 'string') {
      // Handle both comma-separated strings and JSON strings
      try {
        // Try to parse as JSON array first
        const parsed = JSON.parse(project.features);
        if (Array.isArray(parsed)) {
          featuresArray = parsed;
        } else {
          // If not an array, treat as comma-separated
          featuresArray = project.features.split(',').map(f => f.trim()).filter(Boolean);
        }
      } catch (e) {
        // If JSON parsing fails, treat as comma-separated
        featuresArray = project.features.split(',').map(f => f.trim()).filter(Boolean);
      }
    }
  } catch (error) {
    console.error("Error processing features:", error);
    // Fallback to empty array
    featuresArray = [];
  }
  
  return (
    <Card className="overflow-hidden rounded-xl hover:shadow-card-hover transition-all duration-300 group border-border/50 hover:border-primary/30">
      <div className="relative h-48 w-full overflow-hidden">
        <img 
          src={imageUrl} 
          alt={project.title} 
          className="object-cover w-full h-full transition-transform duration-500 group-hover:scale-105"
          loading="lazy"
          onError={(e) => {
            // Fallback image on error
            e.currentTarget.src = "https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=800&h=400&q=80";
          }}
        />
        <div className="absolute inset-0 bg-gradient-to-t from-background/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
      </div>
      <CardHeader className="pb-3">
        <CardTitle className="text-xl line-clamp-1 group-hover:text-primary transition-colors">
          {project.title}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div 
          className="prose max-w-none mb-4 text-sm line-clamp-3 dark:prose-invert" 
          dangerouslySetInnerHTML={{ __html: project.description }} 
        />
        <div className="flex flex-wrap gap-1 mb-4">
          {featuresArray.slice(0, 3).map((feature, idx) => (
            <span 
              key={idx} 
              className="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full border border-primary/20"
            >
              {feature}
            </span>
          ))}
          {featuresArray.length > 3 && featuresArray.length > 0 && (
            <span className="text-xs bg-muted text-muted-foreground px-2 py-1 rounded-full border border-border">
              +{featuresArray.length - 3} more
            </span>
          )}
        </div>
        <div className="flex gap-2">
          {project.liveLink && (
            <Button variant="outline" size="sm" asChild className="flex-1 rounded-full group/button">
              <a href={project.liveLink} target="_blank" rel="noopener noreferrer">
                <ExternalLink className="mr-2 h-4 w-4 group-hover/button:translate-x-1 transition-transform" />
                Live Demo
              </a>
            </Button>
          )}
          {project.repoLink && (
            <Button variant="outline" size="sm" asChild className="flex-1 rounded-full group/button">
              <a href={project.repoLink} target="_blank" rel="noopener noreferrer">
                <Github className="mr-2 h-4 w-4" />
                Repository
              </a>
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

/* ===== src\components\ThemeProvider.tsx ===== */
"use client";

import { createContext, useContext, useEffect, useState, ReactNode } from "react";

type Theme = "light" | "dark";

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export function ThemeProvider({ children }: { children: ReactNode }) {
  const [theme, setTheme] = useState<Theme>("light");

  useEffect(() => {
    // Check for saved theme in localStorage or system preference
    const savedTheme = localStorage.getItem("theme") as Theme | null;
    const systemPrefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    
    if (savedTheme) {
      setTheme(savedTheme);
    } else if (systemPrefersDark) {
      setTheme("dark");
    }
    
    // Apply theme to document
    if (theme === "dark" || (!savedTheme && systemPrefersDark)) {
      document.documentElement.classList.add("dark");
    }
  }, [theme]);

  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
    
    if (newTheme === "dark") {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
}

/* ===== src\components\ThemeToggle.tsx ===== */
"use client";

import { useState, useEffect } from "react";
import { useTheme } from "@/components/ThemeProvider";
import { Button } from "@/components/ui/button";
import { Moon, Sun } from "lucide-react";

export function ThemeToggle() {
  const { theme, toggleTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return (
      <Button variant="ghost" size="icon" className="rounded-full">
        <Sun className="h-5 w-5" />
        <span className="sr-only">Toggle theme</span>
      </Button>
    );
  }

  return (
    <Button 
      variant="ghost" 
      size="icon" 
      onClick={toggleTheme}
      className="rounded-full hover:bg-accent hover:text-accent-foreground transition-colors"
      aria-label="Toggle theme"
    >
      {theme === "dark" ? (
        <Sun className="h-5 w-5" />
      ) : (
        <Moon className="h-5 w-5" />
      )}
    </Button>
  );
}

/* ===== src\components\ui\badge.tsx ===== */
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}

export { Badge, badgeVariants }


/* ===== src\components\ui\button.tsx ===== */
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg text-sm font-medium transition-all duration-300 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground shadow-md hover:bg-primary/90 hover:shadow-lg active:scale-95 border border-primary/20",
        destructive:
          "bg-destructive text-white shadow-md hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60 hover:shadow-lg active:scale-95 border border-destructive/30",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50 hover:shadow-md active:scale-95",
        secondary:
          "bg-secondary text-secondary-foreground shadow-md hover:bg-secondary/80 hover:shadow-lg active:scale-95 border border-secondary/30",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50 active:scale-95",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2 has-[>svg]:px-3",
        sm: "h-9 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-11 rounded-lg px-8 has-[>svg]:px-4",
        icon: "size-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }

/* ===== src\components\ui\card.tsx ===== */
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm transition-all duration-300",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}


/* ===== src\components\ui\input.tsx ===== */
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }


/* ===== src\components\ui\label.tsx ===== */
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }


/* ===== src\components\ui\skeleton.tsx ===== */
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }


/* ===== src\components\ui\textarea.tsx ===== */
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({
  className,
  ...props
}: React.ComponentProps<"textarea">) {
  return (
    <textarea
      className={cn(
        "flex min-h-20 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-all duration-300",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }

/* ===== src\lib\utils.ts ===== */
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


/* ===== src\tools\combine-selected-modules.js ===== */
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Fix for ES modules to get __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Project root directory (two levels up from src/tools)
const ROOT_DIR = path.resolve(__dirname, '..', '..');

// File extensions to include (if you want *all* files, set to null)
const INCLUDE_EXTENSIONS = ['.ts', '.tsx', '.js', '.jsx'];

/**
 * Recursively get files from a directory
 */
function getFilesRecursively(dir) {
  let files = [];
  const items = fs.readdirSync(dir);
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      files = files.concat(getFilesRecursively(fullPath));
    } else if (stat.isFile()) {
      const ext = path.extname(item).toLowerCase();
      if (!INCLUDE_EXTENSIONS || INCLUDE_EXTENSIONS.includes(ext)) {
        files.push(fullPath);
      }
    }
  }
  return files;
}

/**
 * Collect files from src and prisma
 */
function collectFiles() {
  const targetDirs = ['src', 'prisma'];
  let files = [];
  for (const dir of targetDirs) {
    const fullPath = path.join(ROOT_DIR, dir);
    if (fs.existsSync(fullPath) && fs.statSync(fullPath).isDirectory()) {
      files = files.concat(getFilesRecursively(fullPath));
    }
  }
  return files;
}

/**
 * Combine into one output file
 */
function combineAll() {
  try {
    const files = collectFiles();

    if (files.length === 0) {
      console.log('❌ No files found in src/ or prisma/');
      return;
    }

    let combinedContent = '';
    console.log('📂 Combining the following files:');
    for (const filePath of files) {
      try {
        const content = fs.readFileSync(filePath, 'utf-8');
        const relativePath = path.relative(ROOT_DIR, filePath);
        console.log(`- ${relativePath}`);
        combinedContent += `\n/* ===== ${relativePath} ===== */\n`;
        combinedContent += content + '\n';
      } catch (error) {
        console.warn(`⚠️ Skipping ${filePath}: ${error.message}`);
      }
    }

    if (combinedContent) {
      const outputPath = path.join(__dirname, 'output-combine-all.txt');
      fs.writeFileSync(outputPath, combinedContent.trim(), 'utf-8');
      console.log(`✅ Combined ${files.length} files => ${outputPath}`);
    }
  } catch (error) {
    console.error('❌ Error combining files:', error.message);
  }
}

combineAll();

/**
 * Run:
 * node src/tools/combine-selected-modules.js
 */