/* ===== src\app\about\page.tsx ===== */
/* ===== app/about/page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";

export default function About() {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">About Me</h1>
        <section className="prose max-w-none">
          <p>
            Hi, I&apos;m [Your Name], a full-stack developer passionate about building web applications.
          </p>
          <h2>Skills</h2>
          <ul>
            <li>Next.js</li>
            <li>Express.js</li>
            <li>Prisma</li>
            <li>Tailwind CSS</li>
            {/* Add more */}
          </ul>
          <h2>Work Experience</h2>
          <p>
            [Describe your experience]
          </p>
          <h2>Contact</h2>
          <p>Email: [your@email.com]</p>
        </section>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\blogs\page.tsx ===== */
/* ===== app/blogs/page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import BlogCard from "@/components/BlogCard";

async function getBlogs() {
  const res = await fetch("http://localhost:5000/api/blogs", {
    next: { revalidate: 3600 }, // ISR every hour
  });
  if (!res.ok) {
    throw new Error("Failed to fetch blogs");
  }
  return res.json();
}

export default async function Blogs() {
  const blogs = await getBlogs();

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">My Blogs</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {blogs.map((blog: any) => (
            <BlogCard key={blog.id} blog={blog} />
          ))}
        </div>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\blogs\[slug]\page.tsx ===== */
/* ===== app/blogs/[slug]/page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";

export async function generateStaticParams() {
  const res = await fetch("http://localhost:5000/api/blogs");
  const blogs = await res.json();
  return blogs.map((blog: any) => ({
    slug: blog.slug,
  }));
}

async function getBlog(slug: string) {
  const res = await fetch(`http://localhost:5000/api/blogs/${slug}`, {
    next: { revalidate: 3600 }, // ISR
  });
  if (!res.ok) {
    throw new Error("Failed to fetch blog");
  }
  return res.json();
}

export default async function BlogPage({ params }: { params: { slug: string } }) {
  const blog = await getBlog(params.slug);

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-4">{blog.title}</h1>
        <div className="text-sm text-gray-500 mb-6">
          {new Date(blog.createdAt).toLocaleDateString()}
        </div>
        <div
          className="prose max-w-none"
          dangerouslySetInnerHTML={{ __html: blog.content }}
        />
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\dashboard\page.tsx ===== */
/* ===== app/dashboard/page.tsx ===== */
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import BlogForm from "@/components/BlogForm";
import ProjectForm from "@/components/ProjectForm";

interface Blog {
  id: number;
  title: string;
  slug: string;
  content: string;
}

interface Project {
  id: number;
  title: string;
  thumbnail?: string;
  description: string;
  features: string[];
  liveLink?: string;
  repoLink?: string;
}

export default function Dashboard() {
  const [blogs, setBlogs] = useState<Blog[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [editingBlog, setEditingBlog] = useState<Blog | null>(null);
  const [editingProject, setEditingProject] = useState<Project | null>(null);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (!token) {
      router.push("/login");
      return;
    }

    fetchBlogs(token);
    fetchProjects(token);
  }, [router]);

  const fetchBlogs = async (token: string) => {
    try {
      const res = await fetch("http://localhost:5000/api/blogs", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to fetch blogs");
      setBlogs(await res.json());
    } catch (error) {
      toast.error("Error fetching blogs");
    }
  };

  const fetchProjects = async (token: string) => {
    try {
      const res = await fetch("http://localhost:5000/api/projects", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to fetch projects");
      setProjects(await res.json());
    } catch (error) {
      toast.error("Error fetching projects");
    }
  };

  const handleDeleteBlog = async (id: number) => {
    if (!confirm("Are you sure?")) return;
    try {
      const token = localStorage.getItem("token")!;
      const res = await fetch(`http://localhost:5000/api/blogs/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to delete blog");
      toast.success("Blog deleted");
      fetchBlogs(token);
    } catch (error) {
      toast.error("Error deleting blog");
    }
  };

  const handleDeleteProject = async (id: number) => {
    if (!confirm("Are you sure?")) return;
    try {
      const token = localStorage.getItem("token")!;
      const res = await fetch(`http://localhost:5000/api/projects/${id}`, {
        method: "DELETE",
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error("Failed to delete project");
      toast.success("Project deleted");
      fetchProjects(token);
    } catch (error) {
      toast.error("Error deleting project");
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    router.push("/login");
    toast.success("Logged out");
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Dashboard</h1>
          <button onClick={handleLogout} className="bg-red-500 text-white px-4 py-2 rounded">
            Logout
          </button>
        </div>

        <section className="mb-12">
          <h2 className="text-2xl font-semibold mb-4">Manage Blogs</h2>
          <BlogForm
            editingBlog={editingBlog}
            setEditingBlog={setEditingBlog}
            refreshBlogs={() => fetchBlogs(localStorage.getItem("token")!)}
          />
          <ul className="mt-4">
            {blogs.map((blog) => (
              <li key={blog.id} className="flex justify-between items-center mb-2">
                <span>{blog.title}</span>
                <div>
                  <button onClick={() => setEditingBlog(blog)} className="mr-2 text-blue-500">
                    Edit
                  </button>
                  <button onClick={() => handleDeleteBlog(blog.id)} className="text-red-500">
                    Delete
                  </button>
                </div>
              </li>
            ))}
          </ul>
        </section>

        <section>
          <h2 className="text-2xl font-semibold mb-4">Manage Projects</h2>
          <ProjectForm
            editingProject={editingProject}
            setEditingProject={setEditingProject}
            refreshProjects={() => fetchProjects(localStorage.getItem("token")!)}
          />
          <ul className="mt-4">
            {projects.map((project) => (
              <li key={project.id} className="flex justify-between items-center mb-2">
                <span>{project.title}</span>
                <div>
                  <button onClick={() => setEditingProject(project)} className="mr-2 text-blue-500">
                    Edit
                  </button>
                  <button onClick={() => handleDeleteProject(project.id)} className="text-red-500">
                    Delete
                  </button>
                </div>
              </li>
            ))}
          </ul>
        </section>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\layout.tsx ===== */
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Toaster } from "react-hot-toast";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "My Portfolio",
  description: "Personal portfolio showcasing projects and blogs",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
        <Toaster position="top-right" />
      </body>
    </html>
  );
}


/* ===== src\app\login\page.tsx ===== */
/* ===== app/login/page.tsx ===== */
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";
import { z } from "zod";
import Header from "@/components/Header";
import Footer from "@/components/Footer";

const loginSchema = z.object({
  email: z.string().email("Invalid email"),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      loginSchema.parse({ email, password });
      const res = await fetch("http://localhost:5000/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
      });
      if (!res.ok) {
        throw new Error("Invalid credentials");
      }
      const { token } = await res.json();
      localStorage.setItem("token", token);
      toast.success("Logged in successfully");
      router.push("/dashboard");
    } catch (error: any) {
      toast.error(error.message || "Login failed");
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6 text-center">Login</h1>
        <form onSubmit={handleSubmit} className="max-w-md mx-auto">
          <div className="mb-4">
            <label htmlFor="email" className="block mb-1">Email</label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label htmlFor="password" className="block mb-1">Password</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-2 border rounded"
              required
            />
          </div>
          <button type="submit" className="w-full bg-blue-500 text-white p-2 rounded">
            Login
          </button>
        </form>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\page.tsx ===== */
/* ===== app/page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import Image from "next/image";
import Link from "next/link";

export default function Home() {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8">
        <section className="text-center mb-16">
          <h1 className="text-4xl font-bold mb-4">Welcome to My Portfolio</h1>
          <p className="text-lg mb-8">
            Showcase of my projects, blogs, and more.
          </p>
          <Image
            src="/next.svg" // Replace with your logo or hero image
            alt="Portfolio Logo"
            width={180}
            height={38}
            className="mx-auto mb-8"
          />
        </section>
        <section className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <Link
            href="/about"
            className="p-6 border rounded-lg hover:shadow-lg transition"
          >
            <h2 className="text-2xl font-semibold mb-2">About Me</h2>
            <p>Learn more about my background and skills.</p>
          </Link>
          <Link
            href="/projects"
            className="p-6 border rounded-lg hover:shadow-lg transition"
          >
            <h2 className="text-2xl font-semibold mb-2">Projects</h2>
            <p>Explore my personal projects.</p>
          </Link>
          <Link
            href="/blogs"
            className="p-6 border rounded-lg hover:shadow-lg transition"
          >
            <h2 className="text-2xl font-semibold mb-2">Blogs</h2>
            <p>Read my latest articles.</p>
          </Link>
        </section>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\app\projects\page.tsx ===== */
/* ===== app/projects/page.tsx ===== */
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import ProjectCard from "@/components/ProjectsCard";

async function getProjects() {
  const res = await fetch("http://localhost:5000/api/projects", {
    next: { revalidate: 3600 }, // ISR every hour
  });
  if (!res.ok) {
    throw new Error("Failed to fetch projects");
  }
  return res.json();
}

export default async function Projects() {
  const projects = await getProjects();

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1 container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">My Projects</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {projects.map((project: any) => (
            <ProjectCard key={project.id} project={project} />
          ))}
        </div>
      </main>
      <Footer />
    </div>
  );
}

/* ===== src\components\BlogCard.tsx ===== */
/* ===== components/BlogCard.tsx ===== */
import Link from "next/link";

interface BlogCardProps {
  blog: {
    id: number;
    title: string;
    slug: string;
    createdAt: string;
  };
}

export default function BlogCard({ blog }: BlogCardProps) {
  return (
    <div className="border rounded-lg p-4 hover:shadow-lg transition">
      <h3 className="text-xl font-semibold mb-2">{blog.title}</h3>
      <p className="text-sm text-gray-500 mb-4">
        {new Date(blog.createdAt).toLocaleDateString()}
      </p>
      <Link href={`/blogs/${blog.slug}`} className="text-blue-500">
        Read More
      </Link>
    </div>
  );
}

/* ===== src\components\BlogForm.tsx ===== */
/* ===== components/BlogForm.tsx ===== */
"use client";

import { useState } from "react";
import toast from "react-hot-toast";
// import dynamic from "next/dynamic";
// const ReactQuill = dynamic(() => import("react-quill"), { ssr: false });
// import "react-quill/dist/quill.snow.css";

interface BlogFormProps {
  editingBlog: any | null;
  setEditingBlog: (blog: any | null) => void;
  refreshBlogs: () => void;
}

export default function BlogForm({ editingBlog, setEditingBlog, refreshBlogs }: BlogFormProps) {
  const [title, setTitle] = useState(editingBlog?.title || "");
  const [content, setContent] = useState(editingBlog?.content || "");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!title || !content) {
      toast.error("Title and content are required");
      return;
    }
    try {
      const token = localStorage.getItem("token")!;
      const url = editingBlog
        ? `http://localhost:5000/api/blogs/${editingBlog.id}`
        : "http://localhost:5000/api/blogs";
      const method = editingBlog ? "PUT" : "POST";
      const res = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ title, content }),
      });
      if (!res.ok) throw new Error("Failed to save blog");
      toast.success(editingBlog ? "Blog updated" : "Blog created");
      setTitle("");
      setContent("");
      setEditingBlog(null);
      refreshBlogs();
    } catch (error) {
      toast.error("Error saving blog");
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-4">
        <label htmlFor="title" className="block mb-1">Title</label>
        <input
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div className="mb-4">
        <label htmlFor="content" className="block mb-1">Content</label>
        {/* <ReactQuill value={content} onChange={setContent} /> */}
      </div>
      <button type="submit" className="bg-green-500 text-white px-4 py-2 rounded">
        {editingBlog ? "Update Blog" : "Create Blog"}
      </button>
      {editingBlog && (
        <button
          type="button"
          onClick={() => setEditingBlog(null)}
          className="ml-2 bg-gray-500 text-white px-4 py-2 rounded"
        >
          Cancel
        </button>
      )}
    </form>
  );
}

/* ===== src\components\Footer.tsx ===== */
/* ===== components/Footer.tsx ===== */
export default function Footer() {
  return (
    <footer className="bg-gray-800 text-white py-4 text-center">
      <p>&copy; 2025 My Portfolio. All rights reserved.</p>
    </footer>
  );
}

/* ===== src\components\Header.tsx ===== */
/* ===== components/Header.tsx ===== */
"use client";

import Link from "next/link";
import { useEffect, useState } from "react";

export default function Header() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    setIsLoggedIn(!!localStorage.getItem("token"));
  }, []);

  return (
    <header className="bg-gray-800 text-white py-4">
      <nav className="container mx-auto px-4 flex justify-between items-center">
        <Link href="/" className="text-xl font-bold">Portfolio</Link>
        <ul className="flex space-x-4">
          <li><Link href="/">Home</Link></li>
          <li><Link href="/about">About</Link></li>
          <li><Link href="/projects">Projects</Link></li>
          <li><Link href="/blogs">Blogs</Link></li>
          {isLoggedIn ? (
            <li>
              <Link href="/dashboard">Dashboard</Link>
            </li>
          ) : (
            <li>
              <Link href="/login">Login</Link>
            </li>
          )}
        </ul>
      </nav>
    </header>
  );
}

/* ===== src\components\ProjectForm.tsx ===== */
/* ===== components/ProjectForm.tsx ===== */
"use client";

import { useState } from "react";
import toast from "react-hot-toast";

interface ProjectFormProps {
  editingProject: any | null;
  setEditingProject: (project: any | null) => void;
  refreshProjects: () => void;
}

export default function ProjectForm({ editingProject, setEditingProject, refreshProjects }: ProjectFormProps) {
  const [title, setTitle] = useState(editingProject?.title || "");
  const [thumbnail, setThumbnail] = useState(editingProject?.thumbnail || "");
  const [description, setDescription] = useState(editingProject?.description || "");
  const [features, setFeatures] = useState(editingProject?.features.join(", ") || "");
  const [liveLink, setLiveLink] = useState(editingProject?.liveLink || "");
  const [repoLink, setRepoLink] = useState(editingProject?.repoLink || "");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!title || !description) {
      toast.error("Title and description are required");
      return;
    }
    const data = {
      title,
      thumbnail,
      description,
      features: features.split(",").map((f: string) => f.trim()),
      liveLink,
      repoLink,
    };
    try {
      const token = localStorage.getItem("token")!;
      const url = editingProject
        ? `http://localhost:5000/api/projects/${editingProject.id}`
        : "http://localhost:5000/api/projects";
      const method = editingProject ? "PUT" : "POST";
      const res = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(data),
      });
      if (!res.ok) throw new Error("Failed to save project");
      toast.success(editingProject ? "Project updated" : "Project created");
      setTitle("");
      setThumbnail("");
      setDescription("");
      setFeatures("");
      setLiveLink("");
      setRepoLink("");
      setEditingProject(null);
      refreshProjects();
    } catch (error) {
      toast.error("Error saving project");
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="mb-4">
        <label htmlFor="title" className="block mb-1">Title</label>
        <input
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div className="mb-4">
        <label htmlFor="thumbnail" className="block mb-1">Thumbnail URL</label>
        <input
          id="thumbnail"
          value={thumbnail}
          onChange={(e) => setThumbnail(e.target.value)}
          className="w-full p-2 border rounded"
        />
      </div>
      <div className="mb-4">
        <label htmlFor="description" className="block mb-1">Description</label>
        <textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          className="w-full p-2 border rounded"
          required
        />
      </div>
      <div className="mb-4">
        <label htmlFor="features" className="block mb-1">Features (comma-separated)</label>
        <input
          id="features"
          value={features}
          onChange={(e) => setFeatures(e.target.value)}
          className="w-full p-2 border rounded"
        />
      </div>
      <div className="mb-4">
        <label htmlFor="liveLink" className="block mb-1">Live Link</label>
        <input
          id="liveLink"
          value={liveLink}
          onChange={(e) => setLiveLink(e.target.value)}
          className="w-full p-2 border rounded"
        />
      </div>
      <div className="mb-4">
        <label htmlFor="repoLink" className="block mb-1">Repo Link</label>
        <input
          id="repoLink"
          value={repoLink}
          onChange={(e) => setRepoLink(e.target.value)}
          className="w-full p-2 border rounded"
        />
      </div>
      <button type="submit" className="bg-green-500 text-white px-4 py-2 rounded">
        {editingProject ? "Update Project" : "Create Project"}
      </button>
      {editingProject && (
        <button
          type="button"
          onClick={() => setEditingProject(null)}
          className="ml-2 bg-gray-500 text-white px-4 py-2 rounded"
        >
          Cancel
        </button>
      )}
    </form>
  );
}

/* ===== src\components\ProjectsCard.tsx ===== */
/* ===== components/ProjectCard.tsx ===== */
interface ProjectCardProps {
  project: {
    id: number;
    title: string;
    thumbnail?: string;
    description: string;
    features: string[];
    liveLink?: string;
    repoLink?: string;
  };
}

export default function ProjectCard({ project }: ProjectCardProps) {
  return (
    <div className="border rounded-lg p-4 hover:shadow-lg transition">
      {project.thumbnail && (
        <img src={project.thumbnail} alt={project.title} className="w-full h-40 object-cover mb-4" />
      )}
      <h3 className="text-xl font-semibold mb-2">{project.title}</h3>
      <p className="mb-4">{project.description}</p>
      <ul className="list-disc pl-4 mb-4">
        {project.features.map((feature, idx) => (
          <li key={idx}>{feature}</li>
        ))}
      </ul>
      {project.liveLink && (
        <a href={project.liveLink} target="_blank" rel="noopener noreferrer" className="text-blue-500 mr-4">
          Live Demo
        </a>
      )}
      {project.repoLink && (
        <a href={project.repoLink} target="_blank" rel="noopener noreferrer" className="text-blue-500">
          Repository
        </a>
      )}
    </div>
  );
}

/* ===== src\tools\combine-selected-modules.js ===== */
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Fix for ES modules to get __dirname
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Project root directory (two levels up from src/tools)
const ROOT_DIR = path.resolve(__dirname, '..', '..');

// File extensions to include (if you want *all* files, set to null)
const INCLUDE_EXTENSIONS = ['.ts', '.tsx', '.js', '.jsx'];

/**
 * Recursively get files from a directory
 */
function getFilesRecursively(dir) {
  let files = [];
  const items = fs.readdirSync(dir);
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) {
      files = files.concat(getFilesRecursively(fullPath));
    } else if (stat.isFile()) {
      const ext = path.extname(item).toLowerCase();
      if (!INCLUDE_EXTENSIONS || INCLUDE_EXTENSIONS.includes(ext)) {
        files.push(fullPath);
      }
    }
  }
  return files;
}

/**
 * Collect files from src and prisma
 */
function collectFiles() {
  const targetDirs = ['src', 'prisma'];
  let files = [];
  for (const dir of targetDirs) {
    const fullPath = path.join(ROOT_DIR, dir);
    if (fs.existsSync(fullPath) && fs.statSync(fullPath).isDirectory()) {
      files = files.concat(getFilesRecursively(fullPath));
    }
  }
  return files;
}

/**
 * Combine into one output file
 */
function combineAll() {
  try {
    const files = collectFiles();

    if (files.length === 0) {
      console.log('❌ No files found in src/ or prisma/');
      return;
    }

    let combinedContent = '';
    console.log('📂 Combining the following files:');
    for (const filePath of files) {
      try {
        const content = fs.readFileSync(filePath, 'utf-8');
        const relativePath = path.relative(ROOT_DIR, filePath);
        console.log(`- ${relativePath}`);
        combinedContent += `\n/* ===== ${relativePath} ===== */\n`;
        combinedContent += content + '\n';
      } catch (error) {
        console.warn(`⚠️ Skipping ${filePath}: ${error.message}`);
      }
    }

    if (combinedContent) {
      const outputPath = path.join(__dirname, 'output-combine-all.txt');
      fs.writeFileSync(outputPath, combinedContent.trim(), 'utf-8');
      console.log(`✅ Combined ${files.length} files => ${outputPath}`);
    }
  } catch (error) {
    console.error('❌ Error combining files:', error.message);
  }
}

combineAll();

/**
 * Run:
 * node src/tools/combine-selected-modules.js
 */